i21-1393
Cn - lab 08





Question 1:
#This program will create two nodes and send data via UDP from one node to another over a duplex-link





#Creating Simulator Object
set ns [new Simulator]

#creating Two color classes for ns object to distinguish the traffic coming from various sources
$ns color 0 blue
$ns color 1 red

#Creating nam file
set nf [open out.nam w]
$ns namtrace-all $nf

$ns rtproto DV
#Finish procedure to open file using nam to visulaize our network
proc finish {} {
        global ns nf
        $ns flush-trace
        close $nf
        exec nam out.nam &
        exit 0
}

#Defining Nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
set n6 [$ns node]


#Setting Parameters of Nodes
#$n0 color red
#$n0 shape hexagon

$n0 color red
$n1 color red
$n2 color red
$n3 color red
$n4 color red
$n5 color red
$n6 color red

#Defining Duplex link between nodes having bandwidth of 1Mbps, delay of 10ms and Droptail Queue
$ns duplex-link $n0 $n1 512kbps 5ms DropTail     
$ns duplex-link-op $n0 $n1 orient right-up

$ns duplex-link $n1 $n2 512kbps 5ms DropTail     
$ns duplex-link-op $n1 $n2 orient up-right

$ns duplex-link $n2 $n3 512kbps 5ms DropTail     
$ns duplex-link-op $n2 $n3 orient up

$ns duplex-link $n3 $n4 512kbps 5ms DropTail     
$ns duplex-link-op $n3 $n4 orient left

$ns duplex-link $n4 $n5 512kbps 5ms DropTail     
$ns duplex-link-op $n4 $n5 orient down-left

$ns duplex-link $n5 $n6 512kbps 5ms DropTail     
$ns duplex-link-op $n5 $n6 orient down

$ns duplex-link $n6 $n0 512kbps 5ms DropTail     
$ns duplex-link-op $n6 $n0 orient down-right



#Displaying the angle of queue between the nodes
#0.5 means 0.5*pi(90 Degrees) i.e., straight up
$ns duplex-link-op $n0 $n1 queuePos 0.5

#Limiting the queue to only 30 packets 
$ns queue-limit $n0 $n1 100

#Specifying the UDP agent
set udp0 [new Agent/UDP]

#Specifying udp traffic to have red color as defined in the second line of program
$udp0 set fid_ 1

#Attaching the UDP agent with n0
$ns attach-agent $n0 $udp0

#Specifying the Null agent
set null0 [new Agent/Null]

#Attaching the NULL agent with n1
$ns attach-agent $n3 $null0

#Connecting both udp0 and null0 agents for transferring data between n0 and n1
$ns connect $udp0 $null0
 
#Specifying the CBR agent to generate the traffic over udp0 agent
set cbr0 [new Application/Traffic/CBR]

#Each packet having 500 bytes
$cbr0 set packetSize_ 1000

#EAch packet will be generated after 5ms i.e., 200 packets per second
$cbr0 set interval 0.005 

#Attaching cbr0 with udp0
$cbr0 attach-agent $udp0

#Starting the cbr0 at 0.5 simulaio time
$ns at 0.02 "$cbr0 start"

$ns rtmodel-at 0.4 down $n2 $n3
$ns rtmodel-at 1.0 up $n2 $n3
#Stoping the cbr0 at 4.5 simulation time
$ns at 1.5 "$cbr0 stop"

$ns at 2.0 "finish"

$ns run



------------------------------------------------------------------------------------------------------------------------------------------------------------

Question 2:
#This program will create two nodes and send data via UDP from one node to another over a duplex-link




 

#Creating Simulator Object
set ns [new Simulator]

#creating Two color classes for ns object to distinguish the traffic coming from various sources
$ns color 0 blue
$ns color 1 red

#Creating nam file
set nf [open out.nam w]
$ns namtrace-all $nf

$ns rtproto DV
#Finish procedure to open file using nam to visulaize our network
proc finish {} {
        global ns nf
        $ns flush-trace
        close $nf
        exec nam out.nam &
        exit 0
}

#Defining Nodes
set server [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
set n6 [$ns node]


#Setting Parameters of Nodes
#$server color red
#$server shape hexagon

$server color red
$n1 color red
$n2 color red
$n3 color red
$n4 color red
$n5 color red
$n6 color red

#Defining Duplex link between nodes having bandwidth of 1Mbps, delay of 10ms and Droptail Queue
$ns duplex-link $server $n1 512kbps 10ms DropTail     
$ns duplex-link-op $server $n1 orient right

$ns duplex-link $server $n2 512kbps 10ms DropTail     
$ns duplex-link-op $server $n2 orient left

$ns duplex-link $server $n3 512kbps 10ms DropTail     
$ns duplex-link-op $server $n3 orient right-up

$ns duplex-link $server $n4 512kbps 10ms DropTail     
$ns duplex-link-op $server $n4 orient right-down

$ns duplex-link $server $n5 512kbps 10ms DropTail     
$ns duplex-link-op $server $n5 orient left-up

$ns duplex-link $server $n6 512kbps 10ms DropTail     
$ns duplex-link-op $server $n6 orient left-down



#Displaying the angle of queue between the nodes
#0.5 means 0.5*pi(90 Degrees) i.e., straight up
$ns duplex-link-op $server $n1 queuePos 0.5

#Limiting the queue to only 30 packets 
$ns queue-limit $server $n1 100

#Specifying the UDP agent
set udp0 [new Agent/UDP]

#Specifying udp traffic to have red color as defined in the second line of program
$udp0 set fid_ 1

#Attaching the UDP agent with server
$ns attach-agent $n1 $udp0

#Specifying the Null agent
set null0 [new Agent/Null]

#Attaching the NULL agent with n1
$ns attach-agent $n4 $null0

#Connecting both udp0 and null0 agents for transferring data between server and n1
$ns connect $udp0 $null0
 
#Specifying the CBR agent to generate the traffic over udp0 agent
set cbr0 [new Application/Traffic/CBR]

#Each packet having 500 bytes
$cbr0 set packetSize_ 1000

#EAch packet will be generated after 10ms i.e., 200 packets per second
$cbr0 set interval 0.005 

#Attaching cbr0 with udp0
$cbr0 attach-agent $udp0

#Starting the cbr0 at 0.5 simulaio time
$ns at 0.2 "$cbr0 start"

$ns rtmodel-at 0.5 down $server $n5
$ns rtmodel-at 0.9 up $server $n5
#Stoping the cbr0 at 4.5 simulation time
$ns at 1.3 "$cbr0 stop"





#Creating a TCP agent and connecting it to server (Basically it defines source node of TCP)
set tcp0 [new Agent/TCP]
$ns attach-agent $n2 $tcp0        

#Creating a Sink Agent and attaching it to n1
set sink0 [new Agent/TCPSink]
$ns attach-agent $n5 $sink0

#Connecting TCP agent with Sink agent
$ns connect $tcp0 $sink0

#Creating FTP agent for traffic and attching it to tcp0
set ftp0 [new Application/FTP]
$ftp0 attach-agent $tcp0

#Starting the FTP Traffic
$ns at 1.0 "$ftp0 start"

$ns rtmodel-at 0.7 down $server $n4
$ns rtmodel-at 1.2 up $server $n4

$ns at 1.5 "$ftp0 stop"


$ns at 2.0 "finish"



$ns run